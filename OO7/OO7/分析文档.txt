分析文档：
这次的OO作业主要是模拟打车行为

首先是乘客生成订单->
订单传送至系统->
系统将订单分配至出租车->
出租车运行

为了实现这次模拟

我设计了如下几个类：
Order订单类：
	首先订单类有乘客的位置和目的地的位置，
	还有一个time用于记录3秒时间窗口，和一个动态数组用于存储备选出租车，和一个出租车最终用于执行订单
	Order类的方法有：
		inTheOrder：判断出租车是否在订单响应范围内
		chooseOne：从出租车数组中选取一辆车用于执行订单
Taxi出租车类:
	每辆出租车有自己的信誉值，编号，状态，位置，当前订单（没有则为null），还有自己的地图
	Taxi类的方法有：获取两点间距离、随机行驶、按照最短路径行驶
Map地图类：
	地图类的属性有：
	边长
	80*80地图
	6400*6400邻接举证
	可以计算任意两点的最短路径
Uber系统类：
	调用所有出租车和指令的类
Position位置类：
	用于记录出租车每一步行驶的位置
	
以下是一些分析：
网格区域模拟城市地图
{

}
出租
{
	
	
	扫描一下出租车当前状态
		正在服务
		即将服务
		等待服务
		停止运行
	有一个timecounter
	扫描当前是否有分配任务
		如果没有则是等待服务
			如果 count==20000
				运行停止一秒的函数
				count设为0
				进行下次循环
			timecounter+=100;
			等待100毫秒
			进行下次循环
		如果有则是即将服务
			运行 gotoPosition(Order的生成位置){里面自己会运行停止一秒的函数}
			运行 gotoPosition(Order的目标位置){同上}
			Order设为null
			状态设为等待服务
			count设为0
			进入下次循环
	
	
	
	
	100辆
	运行状态
	{
		正在服务：在行驶且车内有乘客		
		即将服务：在行驶且车内无乘客且系统已分配乘客
		等待服务：在行驶无乘客未分配（初始状态），且只有这种状态可以响应乘客请求
		停止运行：不在行驶
	}
	四种状态转换
	{
		等待服务--系统分配乘客-->即将服务
		等待服务--连续运行20s-->停止运行1s
		即将服务--到达等待位置，停止运行1s接客-->再次运行
		正在服务--到达目的地，停止运行1s送客-->再次运行
	}
	行驶原则
	{
		等待服务时：随机选择分支
		即将、正在：最短路径
	}
	信用积累
	{
		初始为0
		抢单+1
		成功服务+3
	}
	满足条件自动抢单
}
乘客
{
	任意一点产生呼叫请求
	呼叫请求
	{
		当前位置
		目的地
	}
	抢单窗口
	可抢单范围
	发出请求后，在时间窗口内发出的其他请求视为其他乘客的请求
}
系统
{
	从抢单出租车中自动优先选择
	{
		在抢单窗口关闭时刻选择等待服务中信用最高->离用户最近->随机选一辆
		没有则通知乘客
		出租车一旦抢单就会记录
		一辆出租车可以抢不止一单
		但每辆车一次服务只能处理一个请求（下次作业会不会要我们处理拼车）
		
	}
	每次当订单队列不为空时
		从订单队列中获得一个订单
			每个订单有一个timecount
			获得client周围4*4的格子内的所有出租车
			根据情况修改满足情况的出租车队列
			如果timecount = 3000
				从Order的出租车队列中挑选一辆最优车辆
					如果有这辆车
						将这辆车的order设为这个Order
						将这个Order提出队列
						continue;
					如果没有这辆车
						将这个Order踢出队列
						打印“这个Order没有接单的车辆”
						continue;
			timecount+=100;
		线程睡眠100毫秒
			

}


所以这次作业：


V1

							┌--发送信号给出租车-->出租车--┐
							|							  |
		┌--查找上的所有符合条件的出租车并选择--->地图	  |
		|												  ↓
一个很牛逼的系统 <--提出请求，附带位置-------------- 这是乘客，至少三百个		
V2

					  ┌-----出租车<---每隔一段时间出租车会get4*4范围内的所有请求---地图<-┐
                      |(把抢单请求发给系统)                                              |(下单，此时乘客数据会在地图上显示)
					  ↓						                                             |
             还是这个很牛逼的系统                                                    这是乘客
好吧，我还没有搭完
V3
大神认为
这个跟电梯是一样的，，仔细想的话。。好像确实是的。。
人发送请求给系统
系统分配出租车
V4
产生请求
请求传给系统
系统有个请求队列
每个请求队列有一个出租车队列
所以从根本上说是
系统把所有满足请求的车放进队列中
顺序处理请求队列，随时扫描，如果出租车的状态改变，则把这辆出租车从出租车队列中剔除


最短路径算法
变量图G，顶点坐标S
新建变量 顶点坐标的队列q
对每个顶点在G中，v到S的距离设为无穷大
S到自己的距离设为0
S入队
当队列不为空时
	临时变量v = q出队
	把v设为已标记
	对每个在v旁边的w
	如果v到S的距离不等于无穷大，
		w到S的距离等于v到S的距离加1
		w的路径 = v
		把w设为已标记
		队列q再把w入队